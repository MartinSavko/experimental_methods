#!/usr/bin/env python

import itertools
import numpy as np
from scipy.ndimage import center_of_mass

def shift(vertical_shift, horizontal_shift):
    s = np.array([[1., 0.,    vertical_shift], 
                  [0., 1.,  horizontal_shift], 
                  [0., 0.,               1.]])
    return s

def scale(vertical_scale, horizontal_scale):
    s = np.diag([vertical_scale, horizontal_scale, 1.])
    return s

class scan:
    def __init__(self, start, end, ):
        self.start = start
        self.end = end
        self.pixels = pixels

        self.extent = end - start
        self.center = start + self.extent/2.
        self.shape = pixels.shape
        
    def get_grid_and_points(self):
        vertical = np.linspace(0, 1, self.rows)
        horizontal = np.linspace(0, 1, self.columns)

        positions = itertools.product(vertical, horizontal)
        points = np.array([np.array(position) for position in positions])
        points = np.hstack([points, np.ones((points.shape[0], 1))])
        
        points = np.dot(shift(-0.5, -0.5), points.T).T
        points = np.dot(scale(*self.extent), points.T).T
        points = np.dot(shift(*self.center), points.T).T

        points[:, 2] += np.arange(points.shape[0])
        
        indexes = map(int, points[:, 2])
        points = dict(zip(indexes, points[:, :2]))
        
        grid = np.reshape(indexes, (self.rows, self.columns))
        
        return grid, points
        
    def horizontal_raster(self, grid, start=1):
        grid[start::2, ::] = grid[start::2, ::-1]
        return grid
        
    def vertical_raster(self, grid, start=1):
        grid[::, start::2] = grid[::-1, start::2]
        return grid
   
def test():
    a = area_scan(2, 3, 5)
    print a.get_grid_and_points()
    
def main():
    import sys
    
    if len(sys.argv) > 0:
        what = sys.argv[1]
    else:
        print 'Please specify what should I aling'
        
if __name__ == '__main__':
    test()
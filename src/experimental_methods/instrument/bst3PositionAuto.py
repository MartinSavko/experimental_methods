#!/usr/bin/env python
# -*- coding:utf-8 -*-


##############################################################################
## license :
##============================================================================
##
## File :        bst3PositionAuto.py
##
## Project :     bst3PositionAuto
##
## This file is part of Tango device class.
##
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
##
##
## $Author :      damien.jeangerard$
##
## $Revision :    2.1
##
## $Date :        2021-01-05
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""Gestion du beamstop en fonction de la position du detecteur"""

__all__ = ["bst3PositionAuto", "bst3PositionAutoClass", "main"]

__docformat__ = "restructuredtext"

try:
    import tango
except ImportError:
    import PyTango as tango
import sys

sys.path.insert(0, "/nfs/ruche-proxima2a/proxima2a-soleil/gitRepos")
# sys.path.insert(0, '/nfs/ruche/proxima2a-soleil/gitRepos/')
from experimental_methods.instrument.beam_center import beam_center

bc = beam_center()

# Add additional import
# ----- PROTECTED REGION ID(bst3PositionAuto.additionnal_import) ENABLED START -----#

# ----- PROTECTED REGION END -----#	//	bst3PositionAuto.additionnal_import

## Device States Description
## STANDBY :
## MOVING :
## FAULT :
## ALARM :
## OFF :


class bst3PositionAuto(tango.Device_4Impl):
    # --------- Add you global variables here --------------------------
    # ----- PROTECTED REGION ID(bst3PositionAuto.global_variables) ENABLED START -----#

    # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.global_variables

    def __init__(self, cl, name):
        tango.Device_4Impl.__init__(self, cl, name)
        self.debug_stream("In __init__()")
        bst3PositionAuto.init_device(self)
        # ----- PROTECTED REGION ID(bst3PositionAuto.__init__) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.__init__

    def delete_device(self):
        self.debug_stream("In delete_device()")
        print("delete")
        # ----- PROTECTED REGION ID(bst3PositionAuto.delete_device) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())

        # ----- PROTECTED REGION ID(bst3PositionAuto.init_device) ENABLED START -----#
        self.dev_DetTs = tango.DeviceProxy(self.DetectorTsProxy)
        self.dev_DetTx = tango.DeviceProxy(self.DetectorTxProxy)
        self.dev_DetTz = tango.DeviceProxy(self.DetectorTzProxy)
        self.dev_BST3Tx = tango.DeviceProxy(self.BST3TxProxy)
        self.dev_BST3Tz = tango.DeviceProxy(self.BST3TzProxy)
        self.dev_Energy = tango.DeviceProxy(self.EnergyProxy)

        self.attr_DetectorTs_read = self.dev_DetTs.position
        self.attr_DetectorTx_read = self.dev_DetTx.position
        self.attr_DetectorTz_read = self.dev_DetTz.position
        self.attr_BST3Tx_read = self.dev_BST3Tx.position
        self.attr_BST3Tz_read = self.dev_BST3Tz.position
        self.attr_enableTracking_read = True

        # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.init_device

    # ------------------------------------------------------------------
    #       State command:
    #
    #       Description: met a jour le State et Status
    #
    #
    # ------------------------------------------------------------------

    def stateDev(self, real):
        devValues = {
            "0": "ON",
            "1": "OFF",
            "2": "CLOSE",
            "3": "OPEN",
            "4": "INSERT",
            "5": "EXTRACT",
            "6": "MOVING",
            "7": "STANDBY",
            "8": "FAULT",
            "9": "INIT",
            "10": "RUNNING",
            "11": "ALARM",
            "12": "DISABLE",
            "13": "UNKNOWN",
        }

        return devValues[str(real)]

    # Lire l'etat du State de chaque Device est le mettre a jour dans Device Status
    def checkState(self):
        self.listDev = {
            "Detector Ts": [self.dev_DetTs, ""],
            "Detector Tx": [self.dev_DetTx, ""],
            "Detector Tz": [self.dev_DetTz, ""],
            "BeamStop Tx": [self.dev_BST3Tx, ""],
            "BeamStop Tz": [self.dev_BST3Tz, ""],
        }
        for dev in self.listDev:
            deviceProxy_state = self.stateDev(self.listDev[dev][0].state().real)
            self.listDev[dev][1] = deviceProxy_state
            arg = dev + " : " + deviceProxy_state + "\n"
            self.append_status(arg)

    # deffined and apply the devcie State
    def defined_State(self):
        allState = []
        for dev in self.listDev:
            allState.append(self.listDev[dev][1])

        standby = "STANDBY"
        off = "OFF"

        # If all device are OFF, Device state = OFF
        if all(a in off for a in allState) == True:
            self.set_state(tango.DevState.OFF)
        # If one motor is Moving, Device state = MOVING
        elif "MOVING" in allState:
            self.set_state(tango.DevState.MOVING)
        # If all motor are Standby, Cevice state = STANDBY
        elif all(a in standby for a in allState) == True:
            self.set_state(tango.DevState.STANDBY)
        # If not previous state, Device State = Fault
        else:
            self.set_state(tango.DevState.FAULT)

    def maj_state(self):
        self.set_status("")  # initialise le status
        self.checkState()
        self.defined_State()
        self.majPosiBST3()

    # ------------------------------------------------------------------
    #       State command:
    #
    #       Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
    #
    #       argout: DevState        State Code
    # ------------------------------------------------------------------
    def dev_state(self):
        self.maj_state()
        argout = self.get_state()
        # self.set_state(argout)
        return argout

    # ------------------------------------------------------------------
    #       Status command:
    #
    #       Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
    #
    #       argout: ConstDevString  Status description
    # ------------------------------------------------------------------
    def dev_status(self):
        self.maj_state()
        self.the_status = self.get_status()
        # self.set_status(self.the_status)
        return self.the_status

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        # ----- PROTECTED REGION ID(bst3PositionAuto.always_executed_hook) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.always_executed_hook

    # -----------------------------------------------------------------------------
    #    bst3PositionAuto read/write attribute methods
    # -----------------------------------------------------------------------------

    def read_enableTracking(self, attr):
        self.debug_stream("In read_enableTracking")
        # ----- PROTECTED REGION ID(bst3PositionAuto.enableTracking_read) ENABLED START -----#

        attr.set_value(self.attr_enableTracking_read)

        # ----- PROTECTED REGION END -----#  //  bst3PositionAuto.enableTracking_read

    def write_enableTracking(self, attr):
        self.debug_stream("In write_enableTracking")
        # ----- PROTECTED REGION ID(bst3PositionAuto.enableTracking_write) ENABLED START -----#

        self.attr_enableTracking_read = attr.get_write_value()

        # ----- PROTECTED REGION END -----#  //  bst3PositionAuto.enableTracking_write

    def read_BeamCenterX(self, attr):
        self.debug_stream("In read_BeamCenterX")
        # ----- PROTECTED REGION ID(bst3PositionAuto.BeamCenterX_read) ENABLED START -----#
        wavelength = self.dev_Energy.energy / 12.3684
        bcNow = bc.get_beam_center(wavelength=wavelength, ts=self.dev_DetTs.position)
        # bcNow    = bcNow*0.075   # pixel To mm

        self.attr_BeamCenterX_read = bcNow[0]
        attr.set_value(self.attr_BeamCenterX_read)
        # ----- PROTECTED REGION END -----#  //  bst3PositionAuto.BeamCenterX_read

    def read_BeamCenterY(self, attr):
        self.debug_stream("In read_BeamCenterY")

        # ----- PROTECTED REGION ID(bst3PositionAuto.BeamCenterY_read) ENABLED START -----#
        wavelength = self.dev_Energy.energy / 12.3684
        bcNow = bc.get_beam_center(wavelength=wavelength, ts=self.dev_DetTs.position)
        # bcNow   = bcNow*0.075    # pixel To mm

        self.attr_BeamCenterY_read = bcNow[1]
        attr.set_value(self.attr_BeamCenterY_read)

        # ----- PROTECTED REGION END -----#  //  bst3PositionAuto.BeamCenterY_read

    def read_DetectorTs(self, attr):
        self.debug_stream("In read_DetectorTs()")
        # ----- PROTECTED REGION ID(bst3PositionAuto.DetectorTs_read) ENABLED START -----#
        self.attr_DetectorTs_read = self.dev_DetTs.position
        attr.set_value(self.attr_DetectorTs_read)
        # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.DetectorTs_read

    def write_DetectorTs(self, attr):
        self.debug_stream("In write_DetectorTs()")
        data = attr.get_write_value()

        # outarg = self.calcPosiBST3(data)
        self.dev_DetTs.position = data
        # self.posiBST3(outarg)
        # self.dev_BST3Tx.position, self.dev_BST3Tz.position  = outarg[0],outarg[1] #positionner le BST3 sur le faisceau axe Tx et Tz
        # ----- PROTECTED REGION ID(bst3PositionAuto.DetectorTs_write) ENABLED START -----#

    def read_DetectorTx(self, attr):
        self.debug_stream("In read_DetectorTx()")
        # ----- PROTECTED REGION ID(bst3PositionAuto.DetectorTx_read) ENABLED START -----#
        self.attr_DetectorTx_read = self.dev_DetTx.position
        attr.set_value(self.attr_DetectorTx_read)
        # ----- PROTECTED REGION END -----#      //      bst3PositionAuto.DetectorTx_read

    def write_DetectorTx(self, attr):
        self.debug_stream("In write_DetectorTx()")
        data = attr.get_write_value()

        self.dev_DetTx.position = data
        # ----- PROTECTED REGION ID(bst3PositionAuto.DetectorTx_write) ENABLED START -----#

    def read_DetectorTz(self, attr):
        self.debug_stream("In read_DetectorTz()")
        # ----- PROTECTED REGION ID(bst3PositionAuto.DetectorTz_read) ENABLED START -----#
        self.attr_DetectorTz_read = self.dev_DetTz.position
        attr.set_value(self.attr_DetectorTz_read)
        # ----- PROTECTED REGION END -----#      //      bst3PositionAuto.DetectorTz_read

    def write_DetectorTz(self, attr):
        self.debug_stream("In write_DetectorTz()")
        data = attr.get_write_value()

        self.dev_DetTx.position = data
        # ----- PROTECTED REGION ID(bst3PositionAuto.DetectorTz_write) ENABLED START -----#

    def read_BST3Tx(self, attr):
        self.debug_stream("In read_BST3Tx()")
        # ----- PROTECTED REGION ID(bst3PositionAuto.BST3Tx_read) ENABLED START -----#
        self.attr_BST3Tx_read = self.dev_BST3Tx.position
        attr.set_value(self.attr_BST3Tx_read)
        # ----- PROTECTED REGION END -----#      //      bst3PositionAuto.BST3Tx_read

    def write_BST3Tx(self, attr):
        self.debug_stream("In write_BST3Tx()")
        data = attr.get_write_value()

        self.dev_BST3Tx.position = data
        # ----- PROTECTED REGION ID(bst3PositionAuto.BST3Tx_write) ENABLED START -----#

    def read_BST3Tz(self, attr):
        self.debug_stream("In read_BST3Tz()")
        # ----- PROTECTED REGION ID(bst3PositionAuto.BST3Tz_read) ENABLED START -----#
        self.attr_BST3Tz_read = self.dev_BST3Tz.position
        attr.set_value(self.attr_BST3Tz_read)
        # ----- PROTECTED REGION END -----#      //      bst3PositionAuto.BST3Tz_read

    def write_BST3Tz(self, attr):
        self.debug_stream("In write_BST3Tz()")
        data = attr.get_write_value()
        self.dev_BST3Tz.position = data
        # ----- PROTECTED REGION ID(bst3PositionAuto.BST3Tz_write) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.DetectorTs_write

        # ----- PROTECTED REGION ID(bst3PositionAuto.initialize_dynamic_attributes) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.initialize_dynamic_attributes

    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        # ----- PROTECTED REGION ID(bst3PositionAuto.read_attr_hardware) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.read_attr_hardware

    # -----------------------------------------------------------------------------
    #    bst3PositionAuto command methods
    # -----------------------------------------------------------------------------

    def majPosiBST3(self):
        self.debug_stream("In majPosiBST3()")
        # ----- PROTECTED REGION ID(bst3PositionAuto.majPosiBST3) ENABLED START -----#

        argout = self.calcPosiBST3(self.dev_DetTs.position, self.dev_DetTx.position)
        if self.attr_enableTracking_read == True:
            self.posiBST3(argout)

        # ----- PROTECTED REGION END -----#      //      bst3PositionAuto.majPosiBST3

        return argout

    def is_majPosiBST3_allowed(self):
        return True

    # -----------------------------------------------------------------------------
    #    bst3PositionAuto fonction Perso #########################################
    # -----------------------------------------------------------------------------

    def calcPosiBST3(self, detTs, detTx):
        wavelength = (
            self.dev_Energy.energy / 12.3684
        )  # recuperation de la longueur d'onde
        point0Ts = bc.get_beam_center(
            wavelength=12.65 / 12.3684, ts=float(self.Distance_Point0Ts_BST3)
        )  # point de mise a zero des deux axes
        newPoint = bc.get_beam_center(
            wavelength=wavelength, ts=float(detTs)
        )  # wavelength=12.65/12.3684,ts=0.4
        newPosi = (point0Ts - newPoint) * 0.075  # 0.075mm = taille d'un pixel
        outarg = [newPosi[0], newPosi[1]]  # passage np.array a list
        outarg[0] = outarg[0] + (
            float(self.Distance_Point0Tx_BST3) - detTx
        )  # deplacement en fonction DTC_Tx refference position
        return outarg

    def posiBST3(self, outarg):
        self.dev_BST3Tx.position, self.dev_BST3Tz.position = (
            outarg[0],
            outarg[1],
        )  # positionner le BST3 sur le faisceau axe Tx et Tz


class bst3PositionAutoClass(tango.DeviceClass):
    # --------- Add you global class variables here --------------------------
    # ----- PROTECTED REGION ID(bst3PositionAuto.global_class_variables) ENABLED START -----#

    # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`bst3PositionAuto.initialize_dynamic_attributes` for each device

        :param dev_list: list of devices
        :type dev_list: :class:`tango.DeviceImpl`"""

        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback

                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        # ----- PROTECTED REGION ID(bst3PositionAuto.dyn_attr) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	bst3PositionAuto.dyn_attr

    #    Class Properties
    class_property_list = {}

    #    Device Properties
    device_property_list = {
        "DetectorTsProxy": [tango.DevString, "Nom du device Ts du dtecteur", []],
        "DetectorTxProxy": [tango.DevString, "Nom du device Tx du dtecteur", []],
        "DetectorTzProxy": [tango.DevString, "Nom du device Tz du dtecteur", []],
        "BST3TxProxy": [
            tango.DevString,
            "Nom du device Tx du Beamstop sur detecteur",
            [],
        ],
        "BST3TzProxy": [
            tango.DevString,
            "Nom du device Tz du Beamstop sur detecteur",
            [],
        ],
        "Position_BST3_Tx": [
            tango.DevString,
            "Preset position Beam Stop detector on Tx",
            [],
        ],
        "Position_BST3_Tz": [
            tango.DevString,
            "Preset position Beam Stop detector on Tz",
            [],
        ],
        "Distance_Point0Ts_BST3": [
            tango.DevString,
            "position DTC_Ts pour reference BST3_Tz a 0mm",
            [],
        ],
        "Distance_Point0Tx_BST3": [
            tango.DevString,
            "position DTC_Tx pour reference BST3_Tx a 0mm",
            [],
        ],
        "EnergyProxy": [tango.DevString, "va chercher la valeur d'energy", []],
    }

    #    Command definitions
    cmd_list = {
        #'Init':
        # [[tango.DevVoid, "none"],
        # [tango.DevVoid, "none"]],
        #'DefinePositionTs':
        # [[tango.DevDouble, "Define position du TS"],
        # [tango.DevDouble, "retourne la position"]],
        "majPosiBST3": [
            [tango.DevVoid, "repositionner le Beamstop sur detecteur"],
            [tango.DevVoid, "none"],
        ],
    }

    #    Attribute definitions
    attr_list = {
        "DetectorTs": [[tango.DevDouble, tango.SCALAR, tango.READ_WRITE]],
        "DetectorTx": [[tango.DevDouble, tango.SCALAR, tango.READ_WRITE]],
        "DetectorTz": [[tango.DevDouble, tango.SCALAR, tango.READ_WRITE]],
        "BST3Tx": [[tango.DevDouble, tango.SCALAR, tango.READ_WRITE]],
        "BST3Tz": [[tango.DevDouble, tango.SCALAR, tango.READ_WRITE]],
        "BeamCenterX": [[tango.DevDouble, tango.SCALAR, tango.READ]],
        "BeamCenterY": [[tango.DevDouble, tango.SCALAR, tango.READ]],
        "enableTracking": [[tango.DevBoolean, tango.SCALAR, tango.READ_WRITE]],
    }


def main():
    try:
        py = tango.Util(sys.argv)
        py.add_class(bst3PositionAutoClass, bst3PositionAuto, "bst3PositionAuto")

        U = tango.Util.instance()
        U.server_init()
        U.server_run()

    except tango.DevFailed as e:
        print("-------> Received a DevFailed exception:", e)
    except Exception as e:
        print("-------> An unforeseen exception occured....", e)


if __name__ == "__main__":
    main()
